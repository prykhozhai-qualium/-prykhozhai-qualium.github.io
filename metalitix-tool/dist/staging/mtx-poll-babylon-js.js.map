{"version":3,"file":"mtx-poll-babylon-js.js","mappings":"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","sources":["webpack://MetalitixLogger/webpack/universalModuleDefinition","webpack://MetalitixLogger/./src/lib/mtx-poll-base.ts","webpack://MetalitixLogger/./src/services/index.ts","webpack://MetalitixLogger/./src/constants/index.ts","webpack://MetalitixLogger/./src/types/index.ts","webpack://MetalitixLogger/./src/utils/index.ts","webpack://MetalitixLogger/./node_modules/three/src/math/MathUtils.js","webpack://MetalitixLogger/webpack/bootstrap","webpack://MetalitixLogger/webpack/runtime/define property getters","webpack://MetalitixLogger/webpack/runtime/hasOwnProperty shorthand","webpack://MetalitixLogger/webpack/runtime/make namespace object","webpack://MetalitixLogger/./src/lib/mtx-poll-babylon-js.ts"],"sourcesContent":["(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory();\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine([], factory);\n\telse if(typeof exports === 'object')\n\t\texports[\"MetalitixLogger\"] = factory();\n\telse\n\t\troot[\"MetalitixLogger\"] = factory();\n})(self, () => {\nreturn ","import { generateUUID } from 'three/src/math/MathUtils';\nimport { sendXRAnalyticsData } from '../services';\nimport {\n  DEFAULT_INTERVAL_VALUE,\n  MAX_INTERVAL_VALUE,\n  MAXIMUM_BATCH_RECORDS_LENGTH,\n  MAXIMUM_BATCH_SENDING_INTERVAL,\n  MAXIMUM_SESSION_KEEPALIVE_TIME,\n  MIN_INTERVAL_VALUE,\n} from '../constants';\nimport { MetalitixLoggerOptions, XRAnalytics } from '../types';\nimport { deepEqual } from '../utils';\n\nexport default abstract class MetalitixLoggerBase<T> {\n  private appKey: string;\n  private apiVersion: string;\n  private interval: number = DEFAULT_INTERVAL_VALUE;\n  private sessionId: string | null;\n  private pollRecords: XRAnalytics.Record[];\n  private lastPollTimestamp: number;\n  private nextPoll: number;\n  private pollInProgress: boolean;\n  private previousCameraData: XRAnalytics.UserCamera | null;\n  private customData: { [key: string]: any } = {};\n  private userMeta: Partial<XRAnalytics.UserMetadata>;\n  protected object3D: T | null = null;\n\n  constructor(appKey: string, options: MetalitixLoggerOptions = {}) {\n    const { pollInterval = DEFAULT_INTERVAL_VALUE, apiVersion = 'v2', userMeta = {} } = options;\n    this.appKey = appKey;\n    this.apiVersion = apiVersion;\n    this.userMeta = userMeta;\n    this.setPollInterval(pollInterval);\n    this.sessionId = null;\n    this.previousCameraData = null;\n    this.pollRecords = [];\n    this.lastPollTimestamp = -1;\n    this.pollInProgress = false;\n    this.nextPoll = -1;\n  }\n\n  public setPollInterval = (pollInterval: number) => {\n    this.interval = Math.min(MAX_INTERVAL_VALUE, Math.max(MIN_INTERVAL_VALUE, pollInterval));\n  };\n\n  public setCustomField = (key: string, value: any) => {\n    this.customData[key] = value;\n  };\n\n  public removeCustomField = (key: string) => {\n    delete this.customData[key];\n  };\n\n  private getRecord = (\n    eventType: XRAnalytics.EventTypes,\n    sessionId: string,\n    { userEvent, userMeta, camera, data }: XRAnalytics.RecordDataFields,\n  ) => {\n    const resultData = Object.assign({}, this.customData, data);\n\n    const base: XRAnalytics.RecordBase = {\n      object: 'xr.analytics.record',\n      appkey: this.appKey,\n      apiver: this.apiVersion,\n      sessionId,\n      timestamp: Date.now(),\n      data: resultData,\n    };\n\n    if (eventType === XRAnalytics.EventTypes.SessionStart) {\n      console.assert(userMeta !== undefined, '\"userMeta\" is required for session start!');\n      console.assert(camera !== undefined, '\"camera\" is required for session start!');\n      return Object.assign({}, base, { eventType, userMeta, camera }) as XRAnalytics.SessionStartRecord;\n    }\n\n    if (eventType === XRAnalytics.EventTypes.SessionUpdate) {\n      console.assert(userMeta !== undefined, '\"userMeta\" is required for session update!');\n      return Object.assign({}, base, { eventType, userMeta, camera }) as XRAnalytics.SessionUpdateRecord;\n    }\n\n    if (eventType === XRAnalytics.EventTypes.SessionEnd) {\n      return Object.assign({}, base, { eventType, camera }) as XRAnalytics.SessionEndRecord;\n    }\n\n    if (eventType === XRAnalytics.EventTypes.UserPosition) {\n      return Object.assign({}, base, { eventType }) as XRAnalytics.UserPositionRecord;\n    }\n\n    if (eventType === XRAnalytics.EventTypes.UserInteraction) {\n      console.assert(userEvent !== undefined, '\"userEvent\" is required for user interaction!');\n      return Object.assign({}, base, { eventType, userEvent }) as XRAnalytics.UserInteractionRecord;\n    }\n\n    throw new Error('Unknown eventType: ' + eventType);\n  };\n\n  private addRecord = (\n    eventType: XRAnalytics.EventTypes,\n    { userEvent, userMeta, camera, data }: XRAnalytics.RecordDataFields,\n  ) => {\n    if (this.sessionId === null) {\n      return;\n    }\n\n    const record = this.getRecord(eventType, this.sessionId, { userEvent, userMeta, camera, data });\n\n    this.pollRecords.push(record);\n  };\n\n  private sendPosition = async (sendAll = false) => {\n    this.pollInProgress = true;\n\n    try {\n      const items = this.pollRecords.slice(0, MAXIMUM_BATCH_RECORDS_LENGTH);\n\n      const batchRecordsData = {\n        object: 'xr.analytics.batch.records',\n        appkey: this.appKey,\n        apiver: this.apiVersion,\n        items,\n      };\n\n      await sendXRAnalyticsData(batchRecordsData);\n      this.pollRecords = this.pollRecords.slice(MAXIMUM_BATCH_RECORDS_LENGTH);\n\n      if (this.pollRecords.length > 0 && sendAll) {\n        await this.sendPosition(true);\n      }\n\n      this.lastPollTimestamp = Date.now();\n    } catch (error) {\n      console.log('Something went wrong', error);\n      this.forceStopLoop();\n    } finally {\n      this.pollInProgress = false;\n    }\n  };\n\n  protected abstract getPositionData: (object3D: T | null) => XRAnalytics.Data | undefined;\n  protected abstract getCameraData: (object3D: T | null) => XRAnalytics.UserCamera | undefined;\n\n  private getUserMeta = (): Partial<XRAnalytics.UserMetadata> => {\n    return Object.assign({}, this.userMeta, {\n      userAgent: window.navigator.userAgent,\n      pagePath: location.pathname,\n      pageQuery: location.search,\n    });\n  };\n\n  private addSessionStart = () => {\n    const data = this.getPositionData(this.object3D);\n    const camera = this.getCameraData(this.object3D);\n    const userMeta = this.getUserMeta();\n    this.previousCameraData = camera || null;\n\n    if (data === undefined) {\n      return;\n    }\n\n    this.addRecord(XRAnalytics.EventTypes.SessionStart, { data, camera, userMeta });\n  };\n  private addSessionEnd = () => {\n    const data = this.getPositionData(this.object3D);\n    let camera = this.getCameraData(this.object3D);\n\n    if (data === undefined) {\n      return;\n    }\n\n    if (deepEqual(camera, this.previousCameraData)) {\n      /** Don't send the camera object if it was not changed */\n      camera = undefined;\n    }\n\n    this.addRecord(XRAnalytics.EventTypes.SessionEnd, { data, camera });\n  };\n  private addUserPosition = () => {\n    const data = this.getPositionData(this.object3D);\n\n    if (data === undefined) {\n      return;\n    }\n\n    this.addRecord(XRAnalytics.EventTypes.UserPosition, { data });\n  };\n  private addSessionUpdate = (camera?: XRAnalytics.UserCamera) => {\n    const data = this.getPositionData(this.object3D);\n    const userMeta = this.getUserMeta();\n\n    if (data === undefined) {\n      return;\n    }\n\n    this.addRecord(XRAnalytics.EventTypes.SessionUpdate, { data, camera, userMeta });\n  };\n\n  private sddNextUserPositionAndUpdateCameraIfNeeded = () => {\n    const camera = this.getCameraData(this.object3D);\n\n    if (camera === undefined || deepEqual(camera, this.previousCameraData)) {\n      this.addUserPosition();\n    } else {\n      this.addSessionUpdate(camera);\n      this.previousCameraData = camera;\n    }\n  };\n\n  private sendPositionLoop = (start = false) => {\n    /** Don't push position twice on session start */\n    if (!start) {\n      this.sddNextUserPositionAndUpdateCameraIfNeeded();\n    }\n\n    if (\n      !this.pollInProgress &&\n      this.pollRecords.length > 0 &&\n      (this.pollRecords.length >= MAXIMUM_BATCH_RECORDS_LENGTH ||\n        Date.now() - this.lastPollTimestamp >= MAXIMUM_BATCH_SENDING_INTERVAL)\n    ) {\n      this.sendPosition();\n    }\n\n    /** Stop polling data if session was ended and there is nothing to send */\n    if (this.sessionId === null && this.pollRecords.length === 0) {\n      return;\n    }\n\n    this.nextPoll = window.setTimeout(() => this.sendPositionLoop(), this.interval);\n  };\n\n  private forceStopLoop = () => clearTimeout(this.nextPoll);\n\n  private clearSessionPollRecords = () => {\n    this.pollRecords = [];\n  };\n\n  private handleVisibilityChange = async () => {\n    /**\n     *  If user close or switch the browser tab - we need to pause the session\n     *  Then if user came back to the browser - we need to try to resume the session if it's possible or start new one\n     **/\n    return document.visibilityState === 'hidden' ? this.pauseSession() : await this.resumeSession();\n  };\n\n  public startSession = (object3D: T) => {\n    this.object3D = object3D;\n    this.sessionId = generateUUID();\n    this.addSessionStart();\n    this.sendPositionLoop(true);\n    document.addEventListener('visibilitychange', this.handleVisibilityChange);\n  };\n\n  public pauseSession = () => {\n    /** If the session was paused we need to send all our data and stop collecting new items */\n    this.forceStopLoop();\n    return this.sendPosition(true);\n  };\n\n  public resumeSession = async () => {\n    if (this.lastPollTimestamp < 0 || Date.now() - this.lastPollTimestamp <= MAXIMUM_SESSION_KEEPALIVE_TIME) {\n      /** If the session was resumed on time - we need to continue collect current session data */\n      this.forceStopLoop(); // in case if session was not paused\n      this.sendPositionLoop();\n    } else if (this.object3D !== null) {\n      /** If the session was resumed when server already has closed the session - we need to start new session */\n      const object3D = this.object3D;\n      await this.endSession();\n      this.startSession(object3D);\n    }\n  };\n\n  public endSession = async () => {\n    if (this.sessionId === null) {\n      /** The session was already ended */\n      return;\n    }\n\n    this.addSessionEnd();\n    this.object3D = null;\n    this.sessionId = null;\n    this.previousCameraData = null;\n    this.forceStopLoop();\n    await this.sendPosition(true);\n    this.clearSessionPollRecords();\n    this.lastPollTimestamp = -1;\n    document.removeEventListener('visibilitychange', this.handleVisibilityChange);\n  };\n\n  public updateUserMeta = (userMeta: Partial<XRAnalytics.UserMetadata>) => {\n    if (userMeta === undefined) {\n      return;\n    }\n\n    this.userMeta = userMeta;\n\n    this.addSessionUpdate();\n  };\n\n  private sendUserEvent = (\n    eventName: string,\n    eventType: XRAnalytics.UserInteractionTypes | string,\n    target?: string | XRAnalytics.EventPoint | any,\n    points?: XRAnalytics.EventPoint[],\n    params?: object,\n  ) => {\n    const data = this.getPositionData(this.object3D);\n    const userEvent: XRAnalytics.UserEvent = {\n      object: 'user.event',\n      eventName,\n      eventType,\n      target,\n      points,\n      params,\n    };\n\n    if (data === undefined) {\n      return;\n    }\n\n    this.addRecord(XRAnalytics.EventTypes.UserInteraction, { data, userEvent });\n  };\n\n  public logCustomEvent = (eventName: string, params: object) => {\n    this.sendUserEvent(eventName, 'custom', undefined, undefined, params);\n  };\n\n  public logKeyDownEvent = (x: number, y: number, params?: object) => {\n    this.sendUserEvent(\n      'key_down',\n      XRAnalytics.UserInteractionTypes.KeyDown,\n      {\n        state: XRAnalytics.PointStates.Pressed,\n        timestamp: Date.now(),\n        position: { x, y },\n      },\n      undefined,\n      params,\n    );\n  };\n\n  public logKeyPressEvent = (x: number, y: number, params?: object) => {\n    this.sendUserEvent(\n      'key_press',\n      XRAnalytics.UserInteractionTypes.KeyPress,\n      {\n        state: XRAnalytics.PointStates.Stationary,\n        timestamp: Date.now(),\n        position: { x, y },\n      },\n      undefined,\n      params,\n    );\n  };\n\n  public logKeyUpEvent = (x: number, y: number, params?: object) => {\n    this.sendUserEvent(\n      'key_up',\n      XRAnalytics.UserInteractionTypes.KeyUp,\n      {\n        state: XRAnalytics.PointStates.Released,\n        timestamp: Date.now(),\n        position: { x, y },\n      },\n      undefined,\n      params,\n    );\n  };\n\n  public logMouseEnterEvent = (x: number, y: number, params?: object) => {\n    this.sendUserEvent(\n      'mouse_enter',\n      XRAnalytics.UserInteractionTypes.MouseEnter,\n      {\n        state: XRAnalytics.PointStates.Stationary,\n        timestamp: Date.now(),\n        position: { x, y },\n      },\n      undefined,\n      params,\n    );\n  };\n\n  public logMouseLeaveEvent = (x: number, y: number, params?: object) => {\n    this.sendUserEvent(\n      'mouse_leave',\n      XRAnalytics.UserInteractionTypes.MouseLeave,\n      {\n        state: XRAnalytics.PointStates.Stationary,\n        timestamp: Date.now(),\n        position: { x, y },\n      },\n      undefined,\n      params,\n    );\n  };\n\n  public logMouseOverEvent = (x: number, y: number, params?: object) => {\n    this.sendUserEvent(\n      'mouse_over',\n      XRAnalytics.UserInteractionTypes.MouseOver,\n      {\n        state: XRAnalytics.PointStates.Stationary,\n        timestamp: Date.now(),\n        position: { x, y },\n      },\n      undefined,\n      params,\n    );\n  };\n\n  public logMouseOutEvent = (x: number, y: number, params?: object) => {\n    this.sendUserEvent(\n      'mouse_out',\n      XRAnalytics.UserInteractionTypes.MouseOut,\n      {\n        state: XRAnalytics.PointStates.Stationary,\n        timestamp: Date.now(),\n        position: { x, y },\n      },\n      undefined,\n      params,\n    );\n  };\n\n  public logMouseDownEvent = (x: number, y: number, params?: object) => {\n    this.sendUserEvent(\n      'mouse_down',\n      XRAnalytics.UserInteractionTypes.MouseDown,\n      {\n        state: XRAnalytics.PointStates.Pressed,\n        timestamp: Date.now(),\n        position: { x, y },\n      },\n      undefined,\n      params,\n    );\n  };\n\n  public logMouseUpEvent = (x: number, y: number, params?: object) => {\n    this.sendUserEvent(\n      'mouse_up',\n      XRAnalytics.UserInteractionTypes.MouseUp,\n      {\n        state: XRAnalytics.PointStates.Released,\n        timestamp: Date.now(),\n        position: { x, y },\n      },\n      undefined,\n      params,\n    );\n  };\n\n  public logMouseMoveEvent = (x: number, y: number, params?: object) => {\n    this.sendUserEvent(\n      'mouse_move',\n      XRAnalytics.UserInteractionTypes.MouseMove,\n      {\n        state: XRAnalytics.PointStates.Updated,\n        timestamp: Date.now(),\n        position: { x, y },\n      },\n      undefined,\n      params,\n    );\n  };\n\n  public logMousePressEvent = (x: number, y: number, params?: object) => {\n    this.sendUserEvent(\n      'mouse_press',\n      XRAnalytics.UserInteractionTypes.MousePress,\n      {\n        state: XRAnalytics.PointStates.Stationary,\n        timestamp: Date.now(),\n        position: { x, y },\n      },\n      undefined,\n      params,\n    );\n  };\n\n  public logTouchTapEvent = (x: number, y: number, params?: object) => {\n    this.sendUserEvent(\n      'touch_tap',\n      XRAnalytics.UserInteractionTypes.TouchTap,\n      {\n        state: XRAnalytics.PointStates.Stationary,\n        timestamp: Date.now(),\n        position: { x, y },\n      },\n      undefined,\n      params,\n    );\n  };\n\n  public logTouchStartEvent = (x: number, y: number, params?: object) => {\n    this.sendUserEvent(\n      'touch_start',\n      XRAnalytics.UserInteractionTypes.TouchStart,\n      {\n        state: XRAnalytics.PointStates.Pressed,\n        timestamp: Date.now(),\n        position: { x, y },\n      },\n      undefined,\n      params,\n    );\n  };\n\n  public logTouchMoveEvent = (x: number, y: number, params?: object) => {\n    this.sendUserEvent(\n      'touch_move',\n      XRAnalytics.UserInteractionTypes.TouchMove,\n      {\n        state: XRAnalytics.PointStates.Updated,\n        timestamp: Date.now(),\n        position: { x, y },\n      },\n      undefined,\n      params,\n    );\n  };\n\n  public logTouchEndEvent = (x: number, y: number, params?: object) => {\n    this.sendUserEvent(\n      'touch_end',\n      XRAnalytics.UserInteractionTypes.TouchEnd,\n      {\n        state: XRAnalytics.PointStates.Released,\n        timestamp: Date.now(),\n        position: { x, y },\n      },\n      undefined,\n      params,\n    );\n  };\n\n  public logZoomStartEvent = (x: number, y: number, params?: object) => {\n    this.sendUserEvent(\n      'zoom_start',\n      XRAnalytics.UserInteractionTypes.ZoomStart,\n      {\n        state: XRAnalytics.PointStates.Pressed,\n        timestamp: Date.now(),\n        position: { x, y },\n      },\n      undefined,\n      params,\n    );\n  };\n\n  public logZoomUpdateEvent = (x: number, y: number, params?: object) => {\n    this.sendUserEvent(\n      'zoom_update',\n      XRAnalytics.UserInteractionTypes.ZoomUpdate,\n      {\n        state: XRAnalytics.PointStates.Updated,\n        timestamp: Date.now(),\n        position: { x, y },\n      },\n      undefined,\n      params,\n    );\n  };\n\n  public logZoomEndEvent = (x: number, y: number, params?: object) => {\n    this.sendUserEvent(\n      'zoom_end',\n      XRAnalytics.UserInteractionTypes.ZoomEnd,\n      {\n        state: XRAnalytics.PointStates.Released,\n        timestamp: Date.now(),\n        position: { x, y },\n      },\n      undefined,\n      params,\n    );\n  };\n}\n","import { API_URL } from '../constants';\nimport { XRAnalytics } from '../types';\n\nexport async function sendXRAnalyticsData(data: XRAnalytics.Record | XRAnalytics.BatchRecord) {\n  console.log('poll', data);\n\n  return fetch(`${API_URL}/xr-analytics`, {\n    method: 'POST',\n    keepalive: true,\n    headers: { 'Content-Type': 'application/json' },\n    body: JSON.stringify(data),\n  });\n}\n","export const isProduction = process.env.NODE_ENV === 'production';\nexport const isStaging = process.env.NODE_ENV === 'staging';\nexport const API_ORIGIN = isProduction\n  ? 'https://app.metalitix.com'\n  : isStaging\n  ? 'https://metalitix-staging.aircards.io'\n  : 'https://metalitix-dev.aircards.io';\nexport const API_VERSION = 'v1';\nexport const API_URL = `${API_ORIGIN}/api/${API_VERSION}`;\n\nexport const MIN_INTERVAL_VALUE = 100;\nexport const MAX_INTERVAL_VALUE = 1000;\nexport const DEFAULT_INTERVAL_VALUE = 500;\n\nexport const MAXIMUM_BATCH_RECORDS_LENGTH = 100;\n/** Wait maximum 3 minutes if limit of MAXIMUM_BATCH_RECORDS_LENGTH was not reached */\nexport const MAXIMUM_BATCH_SENDING_INTERVAL = 3 * 60 * 1000;\n/** Maximum server keepalive time since last successful pull data to the server */\nexport const MAXIMUM_SESSION_KEEPALIVE_TIME = 5 * 60 * 1000;\n","export interface MetalitixLoggerOptions {\n  pollInterval?: number;\n  apiVersion?: string;\n  userMeta?: Partial<XRAnalytics.UserMetadata>;\n}\n\nexport interface Vector2D {\n  x: number;\n  y: number;\n}\n\nexport interface Vector3D {\n  x: number;\n  y: number;\n  z: number;\n}\n\nexport namespace XRAnalytics {\n  export enum PointStates {\n    Pressed = 'state.pressed',\n    Updated = 'state.updated',\n    Released = 'state.released',\n    Stationary = 'state.stationary',\n  }\n\n  export const KnownPointStates = Object.values(PointStates);\n\n  export enum UserInteractionTypes {\n    KeyDown = 'user.interaction.key_down',\n    KeyPress = 'user.interaction.key_press',\n    KeyUp = 'user.interaction.key_down',\n    MouseEnter = 'user.interaction.mouse_enter',\n    MouseLeave = 'user.interaction.mouse_leave',\n    MouseOver = 'user.interaction.mouse_over',\n    MouseOut = 'user.interaction.mouse_out',\n    MouseDown = 'user.interaction.mouse_down',\n    MouseUp = 'user.interaction.mouse_up',\n    MouseMove = 'user.interaction.mouse_move',\n    MousePress = 'user.interaction.mouse_press',\n    TouchTap = 'user.interaction.touch_tap',\n    TouchStart = 'user.interaction.touch_start',\n    TouchMove = 'user.interaction.touch_move',\n    TouchEnd = 'user.interaction.touch_end',\n    ZoomStart = 'user.interaction.zoom_start',\n    ZoomUpdate = 'user.interaction.zoom_update',\n    ZoomEnd = 'user.interaction.zoom_end',\n  }\n\n  export const KnownUserInteractionTypes = Object.values(UserInteractionTypes);\n\n  /**\n   * XR Analytic Log Record Event Point\n   * - describes event point params\n   * @typedef {object} XRAnalyticEventPoint\n   * @property {string} state - point state\n   * @property {number} timestamp - timestamp in msec or ISO string\n   * @property {oneOf|Vector2D|Vector3D} timestamp - timestamp in msec or ISO string\n   */\n  export interface EventPoint {\n    state: PointStates;\n    timestamp: number;\n    position: Vector2D | Vector3D;\n  }\n\n  /**\n   * XR Analytic Log Record User Event\n   * - describes user events params\n   * @typedef {object} XRAnalyticUserEvent\n   * @property {string} object - `user.event`\n   * @property {string} eventName - human-readable event name\n   * @property {string} eventType - event type identifier\n   * @property {string} target - optional field which describes target of this event\n   * @property {array<XRAnalyticEventPoint>} points - multiple points (for multi-touch) or single point\n   * @property {object} params - any additional params\n   */\n  export interface UserEvent {\n    object: string;\n    eventName: string;\n    eventType: UserInteractionTypes | string;\n    target?: string | EventPoint | any;\n    points?: EventPoint[];\n    params?: object;\n  }\n\n  export enum EventTypes {\n    UserPosition = 'event.user.position',\n    UserInteraction = 'event.user.interaction',\n    SessionStart = 'event.session.start',\n    SessionUpdate = 'event.session.update',\n    SessionEnd = 'event.session.end',\n  }\n\n  export const KnownEventTypes = Object.values(EventTypes);\n\n  /**\n   * XR Analytic Log Record User Camera\n   * - describes user camera params\n   * @typedef {object} XRAnalyticUserCamera\n   * @property {number} fieldOfView\n   * @property {number} aspectRatio\n   * @property {number} zNearPlane\n   * @property {number} zFarPlane\n   */\n  export interface UserCamera {\n    fieldOfView: number;\n    aspectRatio: number;\n    zNearPlane: number;\n    zFarPlane: number;\n  }\n\n  /**\n   * XR Analytic Log Record User Metadata\n   * - can contain different fields related to user client.\n   * These list of fields is approximate and all fields are optional.\n   * @typedef {object} XRAnalyticUserMetadata\n   * @property {string} ipAddress - user ip address\n   * @property {string} geolocation - user geolocation\n   * @property {string} userAgent - user client user-agent string\n   * @property {string} pagePath - current page\n   * @property {string} pageQuery - current query params\n   * @property {string} sceneName - current scene name\n   * @property {string} gameLocation - current map / in-game location\n   * @property {object} systemInfo - free dictionary of sys info (like OS ver or etc.)\n   * @property {object} params - any additional params\n   */\n  export interface UserMetadata {\n    ipAddress: string;\n    geolocation: string;\n    userAgent: string;\n    pagePath: string;\n    pageQuery: string;\n    sceneName: string;\n    gameLocation: string;\n    systemInfo: object;\n    params: object;\n  }\n\n  /**\n   * XR Analytic Log Record User Position\n   * - contain position, direction and optionally any additional custom fields\n   * @typedef {object} XRAnalyticRecordData\n   * @property {Vector3D} position - user position\n   * @property {Vector3D} direction - look at direction\n   */\n  export interface Data {\n    position: Vector3D;\n    direction: Vector3D;\n    [k: string]: any;\n  }\n\n  /**\n   * XR Analytic Log RecordBase\n   * @typedef {object} XRAnalyticRecord\n   * @property {string} appkey - project API key\n   * @property {string} apiver - expected to be `'v2'`\n   * @property {string} sessionId - session uuid\n   * @property {number} timestamp - timestamp in msec or ISO string date\n   * @property {XRAnalyticRecordData} data - user position and direction on the scene. Can contain any additional custom fields.\n   */\n  export interface RecordBase {\n    object: string;\n    sessionId: string;\n    timestamp: number;\n    appkey: string;\n    apiver: string;\n    data: Data;\n  }\n\n  /**\n   * XR Analytic Log RecordDataFields\n   * @typedef {object} XRAnalyticRecord\n   * @property {XRAnalyticRecordData} data - user position and direction on the scene. Can contain any additional custom fields.\n   * @property {XRAnalyticUserMetadata} userMeta - field describing client metadata, actual for `event.user.session.start` and `event.user.session.update` events\n   * @property {XRAnalyticUserCamera} camera - field describing user camera, actual for `event.user.session.start` and `event.user.session.update` events\n   * @property {XRAnalyticUserEvent} userEvent - field describing event, actual for `event.user.interaction` events\n   */\n  export interface RecordDataFields {\n    data: Data;\n    userMeta?: Partial<UserMetadata>;\n    camera?: UserCamera;\n    userEvent?: UserEvent;\n  }\n\n  /**\n   * XR Analytic Log SessionStartRecord\n   * @typedef {object} XRAnalyticRecord\n   * @property {string} eventType - EventTypes.SessionStart event type\n   * @property {string} appkey - project API key\n   * @property {string} apiver - expected to be `'v2'`\n   * @property {string} sessionId - session uuid\n   * @property {number} timestamp - timestamp in msec or ISO string date\n   * @property {XRAnalyticUserMetadata} userMeta - required field describing client metadata, actual for `event.user.session.start` and `event.user.session.update` events\n   * @property {XRAnalyticUserCamera} camera - required field describing user camera, actual for `event.user.session.start` and `event.user.session.update` events\n   * @property {XRAnalyticRecordData} data - user position and direction on the scene. Can contain any additional custom fields.\n   */\n  export interface SessionStartRecord extends RecordBase {\n    eventType: EventTypes.SessionStart;\n    userMeta: Partial<UserMetadata>;\n    camera: UserCamera;\n  }\n\n  /**\n   * XR Analytic Log SessionUpdateRecord\n   * @typedef {object} XRAnalyticRecord\n   * @property {string} eventType - EventTypes.SessionUpdate event type\n   * @property {string} appkey - project API key\n   * @property {string} apiver - expected to be `'v2'`\n   * @property {string} sessionId - session uuid\n   * @property {number} timestamp - timestamp in msec or ISO string date\n   * @property {XRAnalyticUserMetadata} userMeta - required field describing client metadata, actual for `event.user.session.start` and `event.user.session.update` events\n   * @property {XRAnalyticUserCamera} camera - optional field describing user camera, actual for `event.user.session.start` and `event.user.session.update` events\n   * @property {XRAnalyticRecordData} data - user position and direction on the scene. Can contain any additional custom fields.\n   */\n  export interface SessionUpdateRecord extends RecordBase {\n    eventType: EventTypes.SessionUpdate;\n    userMeta: Partial<UserMetadata>;\n    camera?: UserCamera;\n  }\n\n  /**\n   * XR Analytic Log SessionEndRecord\n   * @typedef {object} XRAnalyticRecord\n   * @property {string} eventType - EventTypes.SessionEnd event type\n   * @property {string} appkey - project API key\n   * @property {string} apiver - expected to be `'v2'`\n   * @property {string} sessionId - session uuid\n   * @property {number} timestamp - timestamp in msec or ISO string date\n   * @property {XRAnalyticUserCamera} camera - optional field describing user camera, actual for `event.user.session.start` and `event.user.session.update` events\n   * @property {XRAnalyticRecordData} data - user position and direction on the scene. Can contain any additional custom fields.\n   */\n  export interface SessionEndRecord extends RecordBase {\n    eventType: EventTypes.SessionEnd;\n    camera?: UserCamera;\n  }\n\n  /**\n   * XR Analytic Log UserPositionRecord\n   * @typedef {object} XRAnalyticRecord\n   * @property {string} eventType - EventTypes.UserPosition event type\n   * @property {string} appkey - project API key\n   * @property {string} apiver - expected to be `'v2'`\n   * @property {string} sessionId - session uuid\n   * @property {number} timestamp - timestamp in msec or ISO string date\n   * @property {XRAnalyticRecordData} data - user position and direction on the scene. Can contain any additional custom fields.\n   */\n  export interface UserPositionRecord extends RecordBase {\n    eventType: EventTypes.UserPosition;\n  }\n\n  /**\n   * XR Analytic Log UserInteractionRecord\n   * @typedef {object} XRAnalyticRecord\n   * @property {string} eventType - EventTypes.UserPosition event type\n   * @property {string} appkey - project API key\n   * @property {string} apiver - expected to be `'v2'`\n   * @property {string} sessionId - session uuid\n   * @property {number} timestamp - timestamp in msec or ISO string date\n   * @property {XRAnalyticUserEvent} userEvent - required field describing event, actual for `event.user.interaction` events\n   * @property {XRAnalyticRecordData} data - user position and direction on the scene. Can contain any additional custom fields.\n   */\n  export interface UserInteractionRecord extends RecordBase {\n    eventType: EventTypes.UserInteraction;\n    userEvent: UserEvent;\n  }\n\n  /**\n   * XR Analytic Log Record\n   * @typedef {object} XRAnalyticRecord\n   * @property {string} eventType - supported event types\n   * @property {string} appkey - project API key\n   * @property {string} apiver - expected to be `'v2'`\n   * @property {string} sessionId - session uuid\n   * @property {number} timestamp - timestamp in msec or ISO string date\n   * @property {XRAnalyticUserEvent} userEvent - field describing event, actual for `event.user.interaction` events\n   * @property {XRAnalyticUserMetadata} userMeta - field describing client metadata, actual for `event.user.session.start` and `event.user.session.update` events\n   * @property {XRAnalyticUserCamera} camera - field describing user camera, actual for `event.user.session.start` and `event.user.session.update` events\n   * @property {XRAnalyticRecordData} data - user position and direction on the scene. Can contain any additional custom fields.\n   */\n  export type Record =\n    | SessionStartRecord\n    | SessionUpdateRecord\n    | SessionEndRecord\n    | UserPositionRecord\n    | UserInteractionRecord;\n\n  /**\n   * XR Analytic Log Batch Records\n   * @typedef {object} XRAnalyticBatchRecord\n   * @property {string} appkey - project API key\n   * @property {string} apiver - expected to be `'v2'`\n   * @property {array<XRAnalyticRecord>} items - array of individual events\n   */\n  export interface BatchRecord {\n    object: string;\n    appkey: string;\n    apiver: string;\n    items: Record[];\n  }\n}\n","export function deepEqual(x: any, y: any): boolean {\n  const ok = Object.keys;\n  const tx = typeof x;\n  const ty = typeof y;\n\n  return x && y && tx === 'object' && tx === ty ? ok(x).length === ok(y).length && ok(x).every(key => deepEqual(x[key], y[key])) : x === y;\n}\n\nexport function isObject(item: any): item is Object {\n  return item && typeof item === 'object' && !Array.isArray(item);\n}\n\nexport function mergeDeep(target: any, source: any) {\n  let output = Object.assign({}, target);\n  if (isObject(target) && isObject(source)) {\n    Object.keys(source).forEach(key => {\n      if (isObject(source[key])) {\n        if (!(key in target)) Object.assign(output, { [key]: source[key] });\n        else output[key] = mergeDeep(target[key], source[key]);\n      } else {\n        Object.assign(output, { [key]: source[key] });\n      }\n    });\n  }\n  return output;\n}\n","const _lut = [];\n\nfor ( let i = 0; i < 256; i ++ ) {\n\n\t_lut[ i ] = ( i < 16 ? '0' : '' ) + ( i ).toString( 16 );\n\n}\n\nlet _seed = 1234567;\n\n\nconst DEG2RAD = Math.PI / 180;\nconst RAD2DEG = 180 / Math.PI;\n\n// http://stackoverflow.com/questions/105034/how-to-create-a-guid-uuid-in-javascript/21963136#21963136\nfunction generateUUID() {\n\n\tconst d0 = Math.random() * 0xffffffff | 0;\n\tconst d1 = Math.random() * 0xffffffff | 0;\n\tconst d2 = Math.random() * 0xffffffff | 0;\n\tconst d3 = Math.random() * 0xffffffff | 0;\n\tconst uuid = _lut[ d0 & 0xff ] + _lut[ d0 >> 8 & 0xff ] + _lut[ d0 >> 16 & 0xff ] + _lut[ d0 >> 24 & 0xff ] + '-' +\n\t\t\t_lut[ d1 & 0xff ] + _lut[ d1 >> 8 & 0xff ] + '-' + _lut[ d1 >> 16 & 0x0f | 0x40 ] + _lut[ d1 >> 24 & 0xff ] + '-' +\n\t\t\t_lut[ d2 & 0x3f | 0x80 ] + _lut[ d2 >> 8 & 0xff ] + '-' + _lut[ d2 >> 16 & 0xff ] + _lut[ d2 >> 24 & 0xff ] +\n\t\t\t_lut[ d3 & 0xff ] + _lut[ d3 >> 8 & 0xff ] + _lut[ d3 >> 16 & 0xff ] + _lut[ d3 >> 24 & 0xff ];\n\n\t// .toUpperCase() here flattens concatenated strings to save heap memory space.\n\treturn uuid.toUpperCase();\n\n}\n\nfunction clamp( value, min, max ) {\n\n\treturn Math.max( min, Math.min( max, value ) );\n\n}\n\n// compute euclidian modulo of m % n\n// https://en.wikipedia.org/wiki/Modulo_operation\nfunction euclideanModulo( n, m ) {\n\n\treturn ( ( n % m ) + m ) % m;\n\n}\n\n// Linear mapping from range <a1, a2> to range <b1, b2>\nfunction mapLinear( x, a1, a2, b1, b2 ) {\n\n\treturn b1 + ( x - a1 ) * ( b2 - b1 ) / ( a2 - a1 );\n\n}\n\n// https://www.gamedev.net/tutorials/programming/general-and-gameplay-programming/inverse-lerp-a-super-useful-yet-often-overlooked-function-r5230/\nfunction inverseLerp( x, y, value ) {\n\n\tif ( x !== y ) {\n\n\t\treturn ( value - x ) / ( y - x );\n\n\t} else {\n\n\t\treturn 0;\n\n\t}\n\n}\n\n// https://en.wikipedia.org/wiki/Linear_interpolation\nfunction lerp( x, y, t ) {\n\n\treturn ( 1 - t ) * x + t * y;\n\n}\n\n// http://www.rorydriscoll.com/2016/03/07/frame-rate-independent-damping-using-lerp/\nfunction damp( x, y, lambda, dt ) {\n\n\treturn lerp( x, y, 1 - Math.exp( - lambda * dt ) );\n\n}\n\n// https://www.desmos.com/calculator/vcsjnyz7x4\nfunction pingpong( x, length = 1 ) {\n\n\treturn length - Math.abs( euclideanModulo( x, length * 2 ) - length );\n\n}\n\n// http://en.wikipedia.org/wiki/Smoothstep\nfunction smoothstep( x, min, max ) {\n\n\tif ( x <= min ) return 0;\n\tif ( x >= max ) return 1;\n\n\tx = ( x - min ) / ( max - min );\n\n\treturn x * x * ( 3 - 2 * x );\n\n}\n\nfunction smootherstep( x, min, max ) {\n\n\tif ( x <= min ) return 0;\n\tif ( x >= max ) return 1;\n\n\tx = ( x - min ) / ( max - min );\n\n\treturn x * x * x * ( x * ( x * 6 - 15 ) + 10 );\n\n}\n\n// Random integer from <low, high> interval\nfunction randInt( low, high ) {\n\n\treturn low + Math.floor( Math.random() * ( high - low + 1 ) );\n\n}\n\n// Random float from <low, high> interval\nfunction randFloat( low, high ) {\n\n\treturn low + Math.random() * ( high - low );\n\n}\n\n// Random float from <-range/2, range/2> interval\nfunction randFloatSpread( range ) {\n\n\treturn range * ( 0.5 - Math.random() );\n\n}\n\n// Deterministic pseudo-random float in the interval [ 0, 1 ]\nfunction seededRandom( s ) {\n\n\tif ( s !== undefined ) _seed = s % 2147483647;\n\n\t// Park-Miller algorithm\n\n\t_seed = _seed * 16807 % 2147483647;\n\n\treturn ( _seed - 1 ) / 2147483646;\n\n}\n\nfunction degToRad( degrees ) {\n\n\treturn degrees * DEG2RAD;\n\n}\n\nfunction radToDeg( radians ) {\n\n\treturn radians * RAD2DEG;\n\n}\n\nfunction isPowerOfTwo( value ) {\n\n\treturn ( value & ( value - 1 ) ) === 0 && value !== 0;\n\n}\n\nfunction ceilPowerOfTwo( value ) {\n\n\treturn Math.pow( 2, Math.ceil( Math.log( value ) / Math.LN2 ) );\n\n}\n\nfunction floorPowerOfTwo( value ) {\n\n\treturn Math.pow( 2, Math.floor( Math.log( value ) / Math.LN2 ) );\n\n}\n\nfunction setQuaternionFromProperEuler( q, a, b, c, order ) {\n\n\t// Intrinsic Proper Euler Angles - see https://en.wikipedia.org/wiki/Euler_angles\n\n\t// rotations are applied to the axes in the order specified by 'order'\n\t// rotation by angle 'a' is applied first, then by angle 'b', then by angle 'c'\n\t// angles are in radians\n\n\tconst cos = Math.cos;\n\tconst sin = Math.sin;\n\n\tconst c2 = cos( b / 2 );\n\tconst s2 = sin( b / 2 );\n\n\tconst c13 = cos( ( a + c ) / 2 );\n\tconst s13 = sin( ( a + c ) / 2 );\n\n\tconst c1_3 = cos( ( a - c ) / 2 );\n\tconst s1_3 = sin( ( a - c ) / 2 );\n\n\tconst c3_1 = cos( ( c - a ) / 2 );\n\tconst s3_1 = sin( ( c - a ) / 2 );\n\n\tswitch ( order ) {\n\n\t\tcase 'XYX':\n\t\t\tq.set( c2 * s13, s2 * c1_3, s2 * s1_3, c2 * c13 );\n\t\t\tbreak;\n\n\t\tcase 'YZY':\n\t\t\tq.set( s2 * s1_3, c2 * s13, s2 * c1_3, c2 * c13 );\n\t\t\tbreak;\n\n\t\tcase 'ZXZ':\n\t\t\tq.set( s2 * c1_3, s2 * s1_3, c2 * s13, c2 * c13 );\n\t\t\tbreak;\n\n\t\tcase 'XZX':\n\t\t\tq.set( c2 * s13, s2 * s3_1, s2 * c3_1, c2 * c13 );\n\t\t\tbreak;\n\n\t\tcase 'YXY':\n\t\t\tq.set( s2 * c3_1, c2 * s13, s2 * s3_1, c2 * c13 );\n\t\t\tbreak;\n\n\t\tcase 'ZYZ':\n\t\t\tq.set( s2 * s3_1, s2 * c3_1, c2 * s13, c2 * c13 );\n\t\t\tbreak;\n\n\t\tdefault:\n\t\t\tconsole.warn( 'THREE.MathUtils: .setQuaternionFromProperEuler() encountered an unknown order: ' + order );\n\n\t}\n\n}\n\n\n\n\nexport {\n\tDEG2RAD,\n\tRAD2DEG,\n\tgenerateUUID,\n\tclamp,\n\teuclideanModulo,\n\tmapLinear,\n\tinverseLerp,\n\tlerp,\n\tdamp,\n\tpingpong,\n\tsmoothstep,\n\tsmootherstep,\n\trandInt,\n\trandFloat,\n\trandFloatSpread,\n\tseededRandom,\n\tdegToRad,\n\tradToDeg,\n\tisPowerOfTwo,\n\tceilPowerOfTwo,\n\tfloorPowerOfTwo,\n\tsetQuaternionFromProperEuler,\n};\n","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tvar cachedModule = __webpack_module_cache__[moduleId];\n\tif (cachedModule !== undefined) {\n\t\treturn cachedModule.exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\t// no module.id needed\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId](module, module.exports, __webpack_require__);\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n","// define getter functions for harmony exports\n__webpack_require__.d = (exports, definition) => {\n\tfor(var key in definition) {\n\t\tif(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {\n\t\t\tObject.defineProperty(exports, key, { enumerable: true, get: definition[key] });\n\t\t}\n\t}\n};","__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))","// define __esModule on exports\n__webpack_require__.r = (exports) => {\n\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n\t}\n\tObject.defineProperty(exports, '__esModule', { value: true });\n};","import { Scene } from 'babylonjs';\nimport { MetalitixLoggerOptions } from '../types';\nimport MetalitixLoggerBase from './mtx-poll-base';\n\nexport default class MetalitixLogger extends MetalitixLoggerBase<Scene> {\n  constructor(appKey: string, options: MetalitixLoggerOptions = {}) {\n    super(appKey, options);\n  }\n\n  protected getPositionData = (scene: Scene | null) => {\n    const camera = scene?.activeCamera ?? null;\n    if (camera === null) {\n      return undefined;\n    }\n\n    return {\n      position: { x: camera.position.x, y: camera.position.y, z: camera.position.z },\n      direction: { x: camera.absoluteRotation.x, y: camera.absoluteRotation.y, z: camera.absoluteRotation.z },\n    };\n  };\n\n  protected getCameraData = (scene: Scene | null) => {\n    const camera = scene?.activeCamera ?? null;\n    if (camera === null) {\n      return undefined;\n    }\n\n    return {\n      fieldOfView: camera.fov,\n      aspectRatio: camera.viewport.width / camera.viewport.height,\n      zNearPlane: camera.minZ,\n      zFarPlane: camera.maxZ,\n    };\n  };\n}\n"],"names":["root","factory","exports","module","define","amd","self","MetalitixLoggerBase","constructor","appKey","options","interval","DEFAULT_INTERVAL_VALUE","customData","object3D","setPollInterval","pollInterval","this","Math","min","MAX_INTERVAL_VALUE","max","MIN_INTERVAL_VALUE","setCustomField","key","value","removeCustomField","getRecord","eventType","sessionId","userEvent","userMeta","camera","data","resultData","Object","assign","base","object","appkey","apiver","apiVersion","timestamp","Date","now","XRAnalytics","console","assert","undefined","Error","addRecord","record","pollRecords","push","sendPosition","sendAll","pollInProgress","items","slice","MAXIMUM_BATCH_RECORDS_LENGTH","batchRecordsData","sendXRAnalyticsData","length","lastPollTimestamp","error","log","forceStopLoop","getUserMeta","userAgent","window","navigator","pagePath","location","pathname","pageQuery","search","addSessionStart","getPositionData","getCameraData","previousCameraData","addSessionEnd","deepEqual","addUserPosition","addSessionUpdate","sddNextUserPositionAndUpdateCameraIfNeeded","sendPositionLoop","start","MAXIMUM_BATCH_SENDING_INTERVAL","nextPoll","setTimeout","clearTimeout","clearSessionPollRecords","handleVisibilityChange","document","visibilityState","pauseSession","resumeSession","startSession","generateUUID","addEventListener","MAXIMUM_SESSION_KEEPALIVE_TIME","endSession","removeEventListener","updateUserMeta","sendUserEvent","eventName","target","points","params","logCustomEvent","logKeyDownEvent","x","y","state","position","logKeyPressEvent","logKeyUpEvent","logMouseEnterEvent","logMouseLeaveEvent","logMouseOverEvent","logMouseOutEvent","logMouseDownEvent","logMouseUpEvent","logMouseMoveEvent","logMousePressEvent","logTouchTapEvent","logTouchStartEvent","logTouchMoveEvent","logTouchEndEvent","logZoomStartEvent","logZoomUpdateEvent","logZoomEndEvent","fetch","API_URL","method","keepalive","headers","body","JSON","stringify","isProduction","isStaging","API_ORIGIN","API_VERSION","PointStates","UserInteractionTypes","EventTypes","KnownPointStates","values","KnownUserInteractionTypes","KnownEventTypes","ok","keys","tx","every","isObject","item","Array","isArray","mergeDeep","source","output","forEach","_lut","i","toString","_seed","DEG2RAD","PI","RAD2DEG","d0","random","d1","d2","d3","toUpperCase","clamp","euclideanModulo","n","m","mapLinear","a1","a2","b1","b2","inverseLerp","lerp","t","damp","lambda","dt","exp","pingpong","abs","smoothstep","smootherstep","randInt","low","high","floor","randFloat","randFloatSpread","range","seededRandom","s","degToRad","degrees","radToDeg","radians","isPowerOfTwo","ceilPowerOfTwo","pow","ceil","LN2","floorPowerOfTwo","setQuaternionFromProperEuler","q","a","b","c","order","cos","sin","c2","s2","c13","s13","c1_3","s1_3","c3_1","s3_1","set","warn","__webpack_module_cache__","__webpack_require__","moduleId","cachedModule","__webpack_modules__","d","definition","o","defineProperty","enumerable","get","obj","prop","prototype","hasOwnProperty","call","r","Symbol","toStringTag","MetalitixLogger","super","scene","activeCamera","z","direction","absoluteRotation","fieldOfView","fov","aspectRatio","viewport","width","height","zNearPlane","minZ","zFarPlane","maxZ"],"sourceRoot":""}