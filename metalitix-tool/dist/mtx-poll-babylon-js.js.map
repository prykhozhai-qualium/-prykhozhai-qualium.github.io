{"version":3,"file":"mtx-poll-babylon-js.js","mappings":"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","sources":["webpack://MetalitixLogger/webpack/universalModuleDefinition","webpack://MetalitixLogger/webpack/bootstrap","webpack://MetalitixLogger/webpack/runtime/define property getters","webpack://MetalitixLogger/webpack/runtime/hasOwnProperty shorthand","webpack://MetalitixLogger/./node_modules/three/src/math/MathUtils.js","webpack://MetalitixLogger/./src/constants/index.ts","webpack://MetalitixLogger/./src/types/index.ts","webpack://MetalitixLogger/./src/utils/index.ts","webpack://MetalitixLogger/./src/lib/mtx-poll-base.ts","webpack://MetalitixLogger/./src/services/index.ts","webpack://MetalitixLogger/./src/lib/mtx-poll-babylon-js.ts"],"sourcesContent":["(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory();\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine([], factory);\n\telse if(typeof exports === 'object')\n\t\texports[\"MetalitixLogger\"] = factory();\n\telse\n\t\troot[\"MetalitixLogger\"] = factory();\n})(self, () => {\nreturn ","// The require scope\nvar __webpack_require__ = {};\n\n","// define getter functions for harmony exports\n__webpack_require__.d = (exports, definition) => {\n\tfor(var key in definition) {\n\t\tif(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {\n\t\t\tObject.defineProperty(exports, key, { enumerable: true, get: definition[key] });\n\t\t}\n\t}\n};","__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))","const _lut = [];\n\nfor ( let i = 0; i < 256; i ++ ) {\n\n\t_lut[ i ] = ( i < 16 ? '0' : '' ) + ( i ).toString( 16 );\n\n}\n\nlet _seed = 1234567;\n\n\nconst DEG2RAD = Math.PI / 180;\nconst RAD2DEG = 180 / Math.PI;\n\n// http://stackoverflow.com/questions/105034/how-to-create-a-guid-uuid-in-javascript/21963136#21963136\nfunction generateUUID() {\n\n\tconst d0 = Math.random() * 0xffffffff | 0;\n\tconst d1 = Math.random() * 0xffffffff | 0;\n\tconst d2 = Math.random() * 0xffffffff | 0;\n\tconst d3 = Math.random() * 0xffffffff | 0;\n\tconst uuid = _lut[ d0 & 0xff ] + _lut[ d0 >> 8 & 0xff ] + _lut[ d0 >> 16 & 0xff ] + _lut[ d0 >> 24 & 0xff ] + '-' +\n\t\t\t_lut[ d1 & 0xff ] + _lut[ d1 >> 8 & 0xff ] + '-' + _lut[ d1 >> 16 & 0x0f | 0x40 ] + _lut[ d1 >> 24 & 0xff ] + '-' +\n\t\t\t_lut[ d2 & 0x3f | 0x80 ] + _lut[ d2 >> 8 & 0xff ] + '-' + _lut[ d2 >> 16 & 0xff ] + _lut[ d2 >> 24 & 0xff ] +\n\t\t\t_lut[ d3 & 0xff ] + _lut[ d3 >> 8 & 0xff ] + _lut[ d3 >> 16 & 0xff ] + _lut[ d3 >> 24 & 0xff ];\n\n\t// .toUpperCase() here flattens concatenated strings to save heap memory space.\n\treturn uuid.toUpperCase();\n\n}\n\nfunction clamp( value, min, max ) {\n\n\treturn Math.max( min, Math.min( max, value ) );\n\n}\n\n// compute euclidian modulo of m % n\n// https://en.wikipedia.org/wiki/Modulo_operation\nfunction euclideanModulo( n, m ) {\n\n\treturn ( ( n % m ) + m ) % m;\n\n}\n\n// Linear mapping from range <a1, a2> to range <b1, b2>\nfunction mapLinear( x, a1, a2, b1, b2 ) {\n\n\treturn b1 + ( x - a1 ) * ( b2 - b1 ) / ( a2 - a1 );\n\n}\n\n// https://www.gamedev.net/tutorials/programming/general-and-gameplay-programming/inverse-lerp-a-super-useful-yet-often-overlooked-function-r5230/\nfunction inverseLerp( x, y, value ) {\n\n\tif ( x !== y ) {\n\n\t\treturn ( value - x ) / ( y - x );\n\n\t} else {\n\n\t\treturn 0;\n\n\t}\n\n}\n\n// https://en.wikipedia.org/wiki/Linear_interpolation\nfunction lerp( x, y, t ) {\n\n\treturn ( 1 - t ) * x + t * y;\n\n}\n\n// http://www.rorydriscoll.com/2016/03/07/frame-rate-independent-damping-using-lerp/\nfunction damp( x, y, lambda, dt ) {\n\n\treturn lerp( x, y, 1 - Math.exp( - lambda * dt ) );\n\n}\n\n// https://www.desmos.com/calculator/vcsjnyz7x4\nfunction pingpong( x, length = 1 ) {\n\n\treturn length - Math.abs( euclideanModulo( x, length * 2 ) - length );\n\n}\n\n// http://en.wikipedia.org/wiki/Smoothstep\nfunction smoothstep( x, min, max ) {\n\n\tif ( x <= min ) return 0;\n\tif ( x >= max ) return 1;\n\n\tx = ( x - min ) / ( max - min );\n\n\treturn x * x * ( 3 - 2 * x );\n\n}\n\nfunction smootherstep( x, min, max ) {\n\n\tif ( x <= min ) return 0;\n\tif ( x >= max ) return 1;\n\n\tx = ( x - min ) / ( max - min );\n\n\treturn x * x * x * ( x * ( x * 6 - 15 ) + 10 );\n\n}\n\n// Random integer from <low, high> interval\nfunction randInt( low, high ) {\n\n\treturn low + Math.floor( Math.random() * ( high - low + 1 ) );\n\n}\n\n// Random float from <low, high> interval\nfunction randFloat( low, high ) {\n\n\treturn low + Math.random() * ( high - low );\n\n}\n\n// Random float from <-range/2, range/2> interval\nfunction randFloatSpread( range ) {\n\n\treturn range * ( 0.5 - Math.random() );\n\n}\n\n// Deterministic pseudo-random float in the interval [ 0, 1 ]\nfunction seededRandom( s ) {\n\n\tif ( s !== undefined ) _seed = s % 2147483647;\n\n\t// Park-Miller algorithm\n\n\t_seed = _seed * 16807 % 2147483647;\n\n\treturn ( _seed - 1 ) / 2147483646;\n\n}\n\nfunction degToRad( degrees ) {\n\n\treturn degrees * DEG2RAD;\n\n}\n\nfunction radToDeg( radians ) {\n\n\treturn radians * RAD2DEG;\n\n}\n\nfunction isPowerOfTwo( value ) {\n\n\treturn ( value & ( value - 1 ) ) === 0 && value !== 0;\n\n}\n\nfunction ceilPowerOfTwo( value ) {\n\n\treturn Math.pow( 2, Math.ceil( Math.log( value ) / Math.LN2 ) );\n\n}\n\nfunction floorPowerOfTwo( value ) {\n\n\treturn Math.pow( 2, Math.floor( Math.log( value ) / Math.LN2 ) );\n\n}\n\nfunction setQuaternionFromProperEuler( q, a, b, c, order ) {\n\n\t// Intrinsic Proper Euler Angles - see https://en.wikipedia.org/wiki/Euler_angles\n\n\t// rotations are applied to the axes in the order specified by 'order'\n\t// rotation by angle 'a' is applied first, then by angle 'b', then by angle 'c'\n\t// angles are in radians\n\n\tconst cos = Math.cos;\n\tconst sin = Math.sin;\n\n\tconst c2 = cos( b / 2 );\n\tconst s2 = sin( b / 2 );\n\n\tconst c13 = cos( ( a + c ) / 2 );\n\tconst s13 = sin( ( a + c ) / 2 );\n\n\tconst c1_3 = cos( ( a - c ) / 2 );\n\tconst s1_3 = sin( ( a - c ) / 2 );\n\n\tconst c3_1 = cos( ( c - a ) / 2 );\n\tconst s3_1 = sin( ( c - a ) / 2 );\n\n\tswitch ( order ) {\n\n\t\tcase 'XYX':\n\t\t\tq.set( c2 * s13, s2 * c1_3, s2 * s1_3, c2 * c13 );\n\t\t\tbreak;\n\n\t\tcase 'YZY':\n\t\t\tq.set( s2 * s1_3, c2 * s13, s2 * c1_3, c2 * c13 );\n\t\t\tbreak;\n\n\t\tcase 'ZXZ':\n\t\t\tq.set( s2 * c1_3, s2 * s1_3, c2 * s13, c2 * c13 );\n\t\t\tbreak;\n\n\t\tcase 'XZX':\n\t\t\tq.set( c2 * s13, s2 * s3_1, s2 * c3_1, c2 * c13 );\n\t\t\tbreak;\n\n\t\tcase 'YXY':\n\t\t\tq.set( s2 * c3_1, c2 * s13, s2 * s3_1, c2 * c13 );\n\t\t\tbreak;\n\n\t\tcase 'ZYZ':\n\t\t\tq.set( s2 * s3_1, s2 * c3_1, c2 * s13, c2 * c13 );\n\t\t\tbreak;\n\n\t\tdefault:\n\t\t\tconsole.warn( 'THREE.MathUtils: .setQuaternionFromProperEuler() encountered an unknown order: ' + order );\n\n\t}\n\n}\n\n\n\n\nexport {\n\tDEG2RAD,\n\tRAD2DEG,\n\tgenerateUUID,\n\tclamp,\n\teuclideanModulo,\n\tmapLinear,\n\tinverseLerp,\n\tlerp,\n\tdamp,\n\tpingpong,\n\tsmoothstep,\n\tsmootherstep,\n\trandInt,\n\trandFloat,\n\trandFloatSpread,\n\tseededRandom,\n\tdegToRad,\n\tradToDeg,\n\tisPowerOfTwo,\n\tceilPowerOfTwo,\n\tfloorPowerOfTwo,\n\tsetQuaternionFromProperEuler,\n};\n","export const isProduction = process.env.NODE_ENV === 'production';\nexport const isStaging = process.env.NODE_ENV === 'staging';\nexport const API_ORIGIN = isProduction\n  ? 'https://app.metalitix.com'\n  : isStaging\n  ? 'https://metalitix-staging.aircards.io'\n  : 'https://metalitix-dev.aircards.io';\nexport const API_VERSION = 'v1';\nexport const API_URL = `${API_ORIGIN}/api/${API_VERSION}`;\n\nexport const MIN_INTERVAL_VALUE = 100;\nexport const MAX_INTERVAL_VALUE = 1000;\nexport const DEFAULT_INTERVAL_VALUE = 500;\n\nexport const MAXIMUM_BATCH_RECORDS_LENGTH = 100;\n/** Wait maximum 3 minutes if limit of MAXIMUM_BATCH_RECORDS_LENGTH was not reached */\nexport const MAXIMUM_BATCH_SENDING_INTERVAL = 3 * 60 * 1000;\n/** Maximum server keepalive time since last successful pull data to the server */\nexport const MAXIMUM_SESSION_KEEPALIVE_TIME = 5 * 60 * 1000;\n","export interface MetalitixLoggerOptions {\n  pollInterval?: number;\n  apiVersion?: string;\n  userMeta?: Partial<XRAnalytics.UserMetadata>;\n}\n\nexport interface Vector2D {\n  x: number;\n  y: number;\n}\n\nexport interface Vector3D {\n  x: number;\n  y: number;\n  z: number;\n}\n\nexport namespace XRAnalytics {\n  export enum PointStates {\n    Pressed = 'state.pressed',\n    Updated = 'state.updated',\n    Released = 'state.released',\n    Stationary = 'state.stationary',\n  }\n\n  export const KnownPointStates = Object.values(PointStates);\n\n  export enum UserInteractionTypes {\n    KeyDown = 'user.interaction.key_down',\n    KeyPress = 'user.interaction.key_press',\n    KeyUp = 'user.interaction.key_down',\n    MouseEnter = 'user.interaction.mouse_enter',\n    MouseLeave = 'user.interaction.mouse_leave',\n    MouseOver = 'user.interaction.mouse_over',\n    MouseOut = 'user.interaction.mouse_out',\n    MouseDown = 'user.interaction.mouse_down',\n    MouseUp = 'user.interaction.mouse_up',\n    MouseMove = 'user.interaction.mouse_move',\n    MousePress = 'user.interaction.mouse_press',\n    TouchTap = 'user.interaction.touch_tap',\n    TouchStart = 'user.interaction.touch_start',\n    TouchMove = 'user.interaction.touch_move',\n    TouchEnd = 'user.interaction.touch_end',\n    ZoomStart = 'user.interaction.zoom_start',\n    ZoomUpdate = 'user.interaction.zoom_update',\n    ZoomEnd = 'user.interaction.zoom_end',\n  }\n\n  export const KnownUserInteractionTypes = Object.values(UserInteractionTypes);\n\n  /**\n   * XR Analytic Log Record Event Point\n   * - describes event point params\n   * @typedef {object} XRAnalyticEventPoint\n   * @property {string} state - point state\n   * @property {number} timestamp - timestamp in msec or ISO string\n   * @property {oneOf|Vector2D|Vector3D} timestamp - timestamp in msec or ISO string\n   */\n  export interface EventPoint {\n    state: PointStates;\n    timestamp: number;\n    position: Vector2D | Vector3D;\n  }\n\n  /**\n   * XR Analytic Log Record User Event\n   * - describes user events params\n   * @typedef {object} XRAnalyticUserEvent\n   * @property {string} object - `user.event`\n   * @property {string} eventName - human-readable event name\n   * @property {string} eventType - event type identifier\n   * @property {string} target - optional field which describes target of this event\n   * @property {array<XRAnalyticEventPoint>} points - multiple points (for multi-touch) or single point\n   * @property {object} params - any additional params\n   */\n  export interface UserEvent {\n    object: string;\n    eventName: string;\n    eventType: UserInteractionTypes | string;\n    target?: string | EventPoint | any;\n    points?: EventPoint[];\n    params?: object;\n  }\n\n  export enum EventTypes {\n    UserPosition = 'event.user.position',\n    UserInteraction = 'event.user.interaction',\n    SessionStart = 'event.session.start',\n    SessionUpdate = 'event.session.update',\n    SessionEnd = 'event.session.end',\n  }\n\n  export const KnownEventTypes = Object.values(EventTypes);\n\n  /**\n   * XR Analytic Log Record User Camera\n   * - describes user camera params\n   * @typedef {object} XRAnalyticUserCamera\n   * @property {number} fieldOfView\n   * @property {number} aspectRatio\n   * @property {number} zNearPlane\n   * @property {number} zFarPlane\n   */\n  export interface UserCamera {\n    fieldOfView: number;\n    aspectRatio: number;\n    zNearPlane: number;\n    zFarPlane: number;\n  }\n\n  /**\n   * XR Analytic Log Record User Metadata\n   * - can contain different fields related to user client.\n   * These list of fields is approximate and all fields are optional.\n   * @typedef {object} XRAnalyticUserMetadata\n   * @property {string} ipAddress - user ip address\n   * @property {string} geolocation - user geolocation\n   * @property {string} userAgent - user client user-agent string\n   * @property {string} pagePath - current page\n   * @property {string} pageQuery - current query params\n   * @property {string} sceneName - current scene name\n   * @property {string} gameLocation - current map / in-game location\n   * @property {object} systemInfo - free dictionary of sys info (like OS ver or etc.)\n   * @property {object} params - any additional params\n   */\n  export interface UserMetadata {\n    ipAddress: string;\n    geolocation: string;\n    userAgent: string;\n    pagePath: string;\n    pageQuery: string;\n    sceneName: string;\n    gameLocation: string;\n    systemInfo: object;\n    params: object;\n  }\n\n  /**\n   * XR Analytic Log Record User Position\n   * - contain position, direction and optionally any additional custom fields\n   * @typedef {object} XRAnalyticRecordData\n   * @property {Vector3D} position - user position\n   * @property {Vector3D} direction - look at direction\n   */\n  export interface Data {\n    position: Vector3D;\n    direction: Vector3D;\n    [k: string]: any;\n  }\n\n  /**\n   * XR Analytic Log RecordBase\n   * @typedef {object} XRAnalyticRecord\n   * @property {string} appkey - project API key\n   * @property {string} apiver - expected to be `'v2'`\n   * @property {string} sessionId - session uuid\n   * @property {number} timestamp - timestamp in msec or ISO string date\n   * @property {XRAnalyticRecordData} data - user position and direction on the scene. Can contain any additional custom fields.\n   */\n  export interface RecordBase {\n    object: string;\n    sessionId: string;\n    timestamp: number;\n    appkey: string;\n    apiver: string;\n    data: Data;\n  }\n\n  /**\n   * XR Analytic Log RecordDataFields\n   * @typedef {object} XRAnalyticRecord\n   * @property {XRAnalyticRecordData} data - user position and direction on the scene. Can contain any additional custom fields.\n   * @property {XRAnalyticUserMetadata} userMeta - field describing client metadata, actual for `event.user.session.start` and `event.user.session.update` events\n   * @property {XRAnalyticUserCamera} camera - field describing user camera, actual for `event.user.session.start` and `event.user.session.update` events\n   * @property {XRAnalyticUserEvent} userEvent - field describing event, actual for `event.user.interaction` events\n   */\n  export interface RecordDataFields {\n    data: Data;\n    userMeta?: Partial<UserMetadata>;\n    camera?: UserCamera;\n    userEvent?: UserEvent;\n  }\n\n  /**\n   * XR Analytic Log SessionStartRecord\n   * @typedef {object} XRAnalyticRecord\n   * @property {string} eventType - EventTypes.SessionStart event type\n   * @property {string} appkey - project API key\n   * @property {string} apiver - expected to be `'v2'`\n   * @property {string} sessionId - session uuid\n   * @property {number} timestamp - timestamp in msec or ISO string date\n   * @property {XRAnalyticUserMetadata} userMeta - required field describing client metadata, actual for `event.user.session.start` and `event.user.session.update` events\n   * @property {XRAnalyticUserCamera} camera - required field describing user camera, actual for `event.user.session.start` and `event.user.session.update` events\n   * @property {XRAnalyticRecordData} data - user position and direction on the scene. Can contain any additional custom fields.\n   */\n  export interface SessionStartRecord extends RecordBase {\n    eventType: EventTypes.SessionStart;\n    userMeta: Partial<UserMetadata>;\n    camera: UserCamera;\n  }\n\n  /**\n   * XR Analytic Log SessionUpdateRecord\n   * @typedef {object} XRAnalyticRecord\n   * @property {string} eventType - EventTypes.SessionUpdate event type\n   * @property {string} appkey - project API key\n   * @property {string} apiver - expected to be `'v2'`\n   * @property {string} sessionId - session uuid\n   * @property {number} timestamp - timestamp in msec or ISO string date\n   * @property {XRAnalyticUserMetadata} userMeta - required field describing client metadata, actual for `event.user.session.start` and `event.user.session.update` events\n   * @property {XRAnalyticUserCamera} camera - optional field describing user camera, actual for `event.user.session.start` and `event.user.session.update` events\n   * @property {XRAnalyticRecordData} data - user position and direction on the scene. Can contain any additional custom fields.\n   */\n  export interface SessionUpdateRecord extends RecordBase {\n    eventType: EventTypes.SessionUpdate;\n    userMeta: Partial<UserMetadata>;\n    camera?: UserCamera;\n  }\n\n  /**\n   * XR Analytic Log SessionEndRecord\n   * @typedef {object} XRAnalyticRecord\n   * @property {string} eventType - EventTypes.SessionEnd event type\n   * @property {string} appkey - project API key\n   * @property {string} apiver - expected to be `'v2'`\n   * @property {string} sessionId - session uuid\n   * @property {number} timestamp - timestamp in msec or ISO string date\n   * @property {XRAnalyticUserCamera} camera - optional field describing user camera, actual for `event.user.session.start` and `event.user.session.update` events\n   * @property {XRAnalyticRecordData} data - user position and direction on the scene. Can contain any additional custom fields.\n   */\n  export interface SessionEndRecord extends RecordBase {\n    eventType: EventTypes.SessionEnd;\n    camera?: UserCamera;\n  }\n\n  /**\n   * XR Analytic Log UserPositionRecord\n   * @typedef {object} XRAnalyticRecord\n   * @property {string} eventType - EventTypes.UserPosition event type\n   * @property {string} appkey - project API key\n   * @property {string} apiver - expected to be `'v2'`\n   * @property {string} sessionId - session uuid\n   * @property {number} timestamp - timestamp in msec or ISO string date\n   * @property {XRAnalyticRecordData} data - user position and direction on the scene. Can contain any additional custom fields.\n   */\n  export interface UserPositionRecord extends RecordBase {\n    eventType: EventTypes.UserPosition;\n  }\n\n  /**\n   * XR Analytic Log UserInteractionRecord\n   * @typedef {object} XRAnalyticRecord\n   * @property {string} eventType - EventTypes.UserPosition event type\n   * @property {string} appkey - project API key\n   * @property {string} apiver - expected to be `'v2'`\n   * @property {string} sessionId - session uuid\n   * @property {number} timestamp - timestamp in msec or ISO string date\n   * @property {XRAnalyticUserEvent} userEvent - required field describing event, actual for `event.user.interaction` events\n   * @property {XRAnalyticRecordData} data - user position and direction on the scene. Can contain any additional custom fields.\n   */\n  export interface UserInteractionRecord extends RecordBase {\n    eventType: EventTypes.UserInteraction;\n    userEvent: UserEvent;\n  }\n\n  /**\n   * XR Analytic Log Record\n   * @typedef {object} XRAnalyticRecord\n   * @property {string} eventType - supported event types\n   * @property {string} appkey - project API key\n   * @property {string} apiver - expected to be `'v2'`\n   * @property {string} sessionId - session uuid\n   * @property {number} timestamp - timestamp in msec or ISO string date\n   * @property {XRAnalyticUserEvent} userEvent - field describing event, actual for `event.user.interaction` events\n   * @property {XRAnalyticUserMetadata} userMeta - field describing client metadata, actual for `event.user.session.start` and `event.user.session.update` events\n   * @property {XRAnalyticUserCamera} camera - field describing user camera, actual for `event.user.session.start` and `event.user.session.update` events\n   * @property {XRAnalyticRecordData} data - user position and direction on the scene. Can contain any additional custom fields.\n   */\n  export type Record =\n    | SessionStartRecord\n    | SessionUpdateRecord\n    | SessionEndRecord\n    | UserPositionRecord\n    | UserInteractionRecord;\n\n  /**\n   * XR Analytic Log Batch Records\n   * @typedef {object} XRAnalyticBatchRecord\n   * @property {string} appkey - project API key\n   * @property {string} apiver - expected to be `'v2'`\n   * @property {array<XRAnalyticRecord>} items - array of individual events\n   */\n  export interface BatchRecord {\n    object: string;\n    appkey: string;\n    apiver: string;\n    items: Record[];\n  }\n}\n","export function deepEqual(x: any, y: any): boolean {\n  const ok = Object.keys;\n  const tx = typeof x;\n  const ty = typeof y;\n\n  return x && y && tx === 'object' && tx === ty ? ok(x).length === ok(y).length && ok(x).every(key => deepEqual(x[key], y[key])) : x === y;\n}\n\nexport function isObject(item: any): item is Object {\n  return item && typeof item === 'object' && !Array.isArray(item);\n}\n\nexport function mergeDeep(target: any, source: any) {\n  let output = Object.assign({}, target);\n  if (isObject(target) && isObject(source)) {\n    Object.keys(source).forEach(key => {\n      if (isObject(source[key])) {\n        if (!(key in target)) Object.assign(output, { [key]: source[key] });\n        else output[key] = mergeDeep(target[key], source[key]);\n      } else {\n        Object.assign(output, { [key]: source[key] });\n      }\n    });\n  }\n  return output;\n}\n","import { generateUUID } from 'three/src/math/MathUtils';\nimport { sendXRAnalyticsData } from '../services';\nimport {\n  DEFAULT_INTERVAL_VALUE,\n  MAX_INTERVAL_VALUE,\n  MAXIMUM_BATCH_RECORDS_LENGTH,\n  MAXIMUM_BATCH_SENDING_INTERVAL,\n  MAXIMUM_SESSION_KEEPALIVE_TIME,\n  MIN_INTERVAL_VALUE,\n} from '../constants';\nimport { MetalitixLoggerOptions, XRAnalytics } from '../types';\nimport { deepEqual } from '../utils';\n\nexport default abstract class MetalitixLoggerBase<T> {\n  private appKey: string;\n  private apiVersion: string;\n  private interval: number = DEFAULT_INTERVAL_VALUE;\n  private sessionId: string | null;\n  private pollRecords: XRAnalytics.Record[];\n  private lastPollTimestamp: number;\n  private nextPoll: number;\n  private previousCameraData: XRAnalytics.UserCamera | null;\n  private customData: { [key: string]: any } = {};\n  private userMeta: Partial<XRAnalytics.UserMetadata>;\n  protected object3D: T | null = null;\n\n  constructor(appKey: string, options: MetalitixLoggerOptions = {}) {\n    const { pollInterval = DEFAULT_INTERVAL_VALUE, apiVersion = 'v2', userMeta = {} } = options;\n    this.appKey = appKey;\n    this.apiVersion = apiVersion;\n    this.userMeta = userMeta;\n    this.setPollInterval(pollInterval);\n    this.sessionId = null;\n    this.previousCameraData = null;\n    this.pollRecords = [];\n    this.lastPollTimestamp = -1;\n    this.nextPoll = -1;\n  }\n\n  public setPollInterval = (pollInterval: number) => {\n    this.interval = Math.min(MAX_INTERVAL_VALUE, Math.max(MIN_INTERVAL_VALUE, pollInterval));\n  };\n\n  public setCustomField = (key: string, value: any) => {\n    this.customData[key] = value;\n  };\n\n  public removeCustomField = (key: string) => {\n    delete this.customData[key];\n  };\n\n  private getRecord = (\n    eventType: XRAnalytics.EventTypes,\n    sessionId: string,\n    { userEvent, userMeta, camera, data }: XRAnalytics.RecordDataFields,\n  ) => {\n    const resultData = Object.assign({}, this.customData, data);\n\n    const base: XRAnalytics.RecordBase = {\n      object: 'xr.analytics.record',\n      appkey: this.appKey,\n      apiver: this.apiVersion,\n      sessionId,\n      timestamp: Date.now(),\n      data: resultData,\n    };\n\n    if (eventType === XRAnalytics.EventTypes.SessionStart) {\n      console.assert(userMeta !== undefined, '\"userMeta\" is required for session start!');\n      console.assert(camera !== undefined, '\"camera\" is required for session start!');\n      return Object.assign({}, base, { eventType, userMeta, camera }) as XRAnalytics.SessionStartRecord;\n    }\n\n    if (eventType === XRAnalytics.EventTypes.SessionUpdate) {\n      console.assert(userMeta !== undefined, '\"userMeta\" is required for session update!');\n      return Object.assign({}, base, { eventType, userMeta, camera }) as XRAnalytics.SessionUpdateRecord;\n    }\n\n    if (eventType === XRAnalytics.EventTypes.SessionEnd) {\n      return Object.assign({}, base, { eventType, camera }) as XRAnalytics.SessionEndRecord;\n    }\n\n    if (eventType === XRAnalytics.EventTypes.UserPosition) {\n      return Object.assign({}, base, { eventType }) as XRAnalytics.UserPositionRecord;\n    }\n\n    if (eventType === XRAnalytics.EventTypes.UserInteraction) {\n      console.assert(userEvent !== undefined, '\"userEvent\" is required for user interaction!');\n      return Object.assign({}, base, { eventType, userEvent }) as XRAnalytics.UserInteractionRecord;\n    }\n\n    throw new Error('Unknown eventType: ' + eventType);\n  };\n\n  private addRecord = (\n    eventType: XRAnalytics.EventTypes,\n    { userEvent, userMeta, camera, data }: XRAnalytics.RecordDataFields,\n  ) => {\n    if (this.sessionId === null) {\n      return;\n    }\n\n    const record = this.getRecord(eventType, this.sessionId, { userEvent, userMeta, camera, data });\n\n    this.pollRecords.push(record);\n  };\n\n  private sendPosition = async (sendAll = false) => {\n    try {\n      const items = this.pollRecords.slice(0, MAXIMUM_BATCH_RECORDS_LENGTH);\n\n      const batchRecordsData = {\n        object: 'xr.analytics.batch.records',\n        appkey: this.appKey,\n        apiver: this.apiVersion,\n        items,\n      };\n\n      await sendXRAnalyticsData(batchRecordsData);\n      this.pollRecords = this.pollRecords.slice(MAXIMUM_BATCH_RECORDS_LENGTH);\n\n      if (this.pollRecords.length > 0 && sendAll) {\n        await this.sendPosition(true);\n      }\n\n      this.lastPollTimestamp = Date.now();\n    } catch (error) {\n      console.log('Something went wrong', error);\n      this.forceStopLoop();\n    }\n  };\n\n  protected abstract getPositionData: (object3D: T | null) => XRAnalytics.Data | undefined;\n  protected abstract getCameraData: (object3D: T | null) => XRAnalytics.UserCamera | undefined;\n\n  private getUserMeta = (): Partial<XRAnalytics.UserMetadata> => {\n    return Object.assign({}, this.userMeta, {\n      userAgent: window.navigator.userAgent,\n      pagePath: location.pathname,\n      pageQuery: location.search,\n    });\n  };\n\n  private addSessionStart = () => {\n    const data = this.getPositionData(this.object3D);\n    const camera = this.getCameraData(this.object3D);\n    const userMeta = this.getUserMeta();\n    this.previousCameraData = camera || null;\n\n    if (data === undefined) {\n      return;\n    }\n\n    this.addRecord(XRAnalytics.EventTypes.SessionStart, { data, camera, userMeta });\n  };\n  private addSessionEnd = () => {\n    const data = this.getPositionData(this.object3D);\n    let camera = this.getCameraData(this.object3D);\n\n    if (data === undefined) {\n      return;\n    }\n\n    if (deepEqual(camera, this.previousCameraData)) {\n      /** Don't send the camera object if it was not changed */\n      camera = undefined;\n    }\n\n    this.addRecord(XRAnalytics.EventTypes.SessionEnd, { data, camera });\n  };\n  private addUserPosition = () => {\n    const data = this.getPositionData(this.object3D);\n\n    if (data === undefined) {\n      return;\n    }\n\n    this.addRecord(XRAnalytics.EventTypes.UserPosition, { data });\n  };\n  private addSessionUpdate = (camera?: XRAnalytics.UserCamera) => {\n    const data = this.getPositionData(this.object3D);\n    const userMeta = this.getUserMeta();\n\n    if (data === undefined) {\n      return;\n    }\n\n    this.addRecord(XRAnalytics.EventTypes.SessionUpdate, { data, camera, userMeta });\n  };\n\n  private sddNextUserPositionAndUpdateCameraIfNeeded = () => {\n    const camera = this.getCameraData(this.object3D);\n\n    if (camera === undefined || deepEqual(camera, this.previousCameraData)) {\n      this.addUserPosition();\n    } else {\n      this.addSessionUpdate(camera);\n      this.previousCameraData = camera;\n    }\n  };\n\n  private sendPositionLoop = (start = false) => {\n    /** Don't push position twice on session start */\n    if (!start) {\n      this.sddNextUserPositionAndUpdateCameraIfNeeded();\n    }\n\n    if (\n      this.pollRecords.length > 0 &&\n      (this.pollRecords.length >= MAXIMUM_BATCH_RECORDS_LENGTH ||\n        Date.now() - this.lastPollTimestamp >= MAXIMUM_BATCH_SENDING_INTERVAL)\n    ) {\n      this.sendPosition();\n    }\n\n    /** Stop polling data if session was ended and there is nothing to send */\n    if (this.sessionId === null && this.pollRecords.length === 0) {\n      return;\n    }\n\n    this.nextPoll = window.setTimeout(() => this.sendPositionLoop(), this.interval);\n  };\n\n  private forceStopLoop = () => clearTimeout(this.nextPoll);\n\n  private clearSessionPollRecords = () => {\n    this.pollRecords = [];\n  };\n\n  private handleVisibilityChange = async () => {\n    /**\n     *  If user close or switch the browser tab - we need to pause the session\n     *  Then if user came back to the browser - we need to try to resume the session if it's possible or start new one\n     **/\n    return document.visibilityState === 'hidden' ? this.pauseSession() : await this.resumeSession();\n  };\n\n  public startSession = (object3D: T) => {\n    this.object3D = object3D;\n    this.sessionId = generateUUID();\n    this.addSessionStart();\n    this.sendPositionLoop(true);\n    document.addEventListener('visibilitychange', this.handleVisibilityChange);\n  };\n\n  public pauseSession = () => {\n    /** If the session was paused we need to send all our data and stop collecting new items */\n    this.forceStopLoop();\n    return this.sendPosition(true);\n  };\n\n  public resumeSession = async () => {\n    if (Date.now() - this.lastPollTimestamp <= MAXIMUM_SESSION_KEEPALIVE_TIME) {\n      /** If the session was resumed on time - we need to continue collect current session data */\n      this.forceStopLoop(); // in case if session was not paused\n      this.sendPositionLoop();\n    } else if (this.object3D !== null) {\n      /** If the session was resumed when server already has closed the session - we need to start new session */\n      const object3D = this.object3D;\n      await this.endSession();\n      this.startSession(object3D);\n    }\n  };\n\n  public endSession = async () => {\n    if (this.sessionId === null) {\n      /** The session was already ended */\n      return;\n    }\n\n    this.addSessionEnd();\n    this.object3D = null;\n    this.sessionId = null;\n    this.previousCameraData = null;\n    this.forceStopLoop();\n    await this.sendPosition(true);\n    this.clearSessionPollRecords();\n    this.lastPollTimestamp = -1;\n    document.removeEventListener('visibilitychange', this.handleVisibilityChange);\n  };\n\n  public updateUserMeta = (userMeta: Partial<XRAnalytics.UserMetadata>) => {\n    if (userMeta === undefined) {\n      return;\n    }\n\n    this.userMeta = userMeta;\n\n    this.addSessionUpdate();\n  };\n\n  private sendUserEvent = (\n    eventName: string,\n    eventType: XRAnalytics.UserInteractionTypes | string,\n    target?: string | XRAnalytics.EventPoint | any,\n    points?: XRAnalytics.EventPoint[],\n    params?: object,\n  ) => {\n    const data = this.getPositionData(this.object3D);\n    const userEvent: XRAnalytics.UserEvent = {\n      object: 'user.event',\n      eventName,\n      eventType,\n      target,\n      points,\n      params,\n    };\n\n    if (data === undefined) {\n      return;\n    }\n\n    this.addRecord(XRAnalytics.EventTypes.UserInteraction, { data, userEvent });\n  };\n\n  public logCustomEvent = (eventName: string, params: object) => {\n    this.sendUserEvent(eventName, 'custom', undefined, undefined, params);\n  };\n\n  public logKeyDownEvent = (x: number, y: number, params?: object) => {\n    this.sendUserEvent(\n      'key_down',\n      XRAnalytics.UserInteractionTypes.KeyDown,\n      {\n        state: XRAnalytics.PointStates.Pressed,\n        timestamp: Date.now(),\n        position: { x, y },\n      },\n      undefined,\n      params,\n    );\n  };\n\n  public logKeyPressEvent = (x: number, y: number, params?: object) => {\n    this.sendUserEvent(\n      'key_press',\n      XRAnalytics.UserInteractionTypes.KeyPress,\n      {\n        state: XRAnalytics.PointStates.Stationary,\n        timestamp: Date.now(),\n        position: { x, y },\n      },\n      undefined,\n      params,\n    );\n  };\n\n  public logKeyUpEvent = (x: number, y: number, params?: object) => {\n    this.sendUserEvent(\n      'key_up',\n      XRAnalytics.UserInteractionTypes.KeyUp,\n      {\n        state: XRAnalytics.PointStates.Released,\n        timestamp: Date.now(),\n        position: { x, y },\n      },\n      undefined,\n      params,\n    );\n  };\n\n  public logMouseEnterEvent = (x: number, y: number, params?: object) => {\n    this.sendUserEvent(\n      'mouse_enter',\n      XRAnalytics.UserInteractionTypes.MouseEnter,\n      {\n        state: XRAnalytics.PointStates.Stationary,\n        timestamp: Date.now(),\n        position: { x, y },\n      },\n      undefined,\n      params,\n    );\n  };\n\n  public logMouseLeaveEvent = (x: number, y: number, params?: object) => {\n    this.sendUserEvent(\n      'mouse_leave',\n      XRAnalytics.UserInteractionTypes.MouseLeave,\n      {\n        state: XRAnalytics.PointStates.Stationary,\n        timestamp: Date.now(),\n        position: { x, y },\n      },\n      undefined,\n      params,\n    );\n  };\n\n  public logMouseOverEvent = (x: number, y: number, params?: object) => {\n    this.sendUserEvent(\n      'mouse_over',\n      XRAnalytics.UserInteractionTypes.MouseOver,\n      {\n        state: XRAnalytics.PointStates.Stationary,\n        timestamp: Date.now(),\n        position: { x, y },\n      },\n      undefined,\n      params,\n    );\n  };\n\n  public logMouseOutEvent = (x: number, y: number, params?: object) => {\n    this.sendUserEvent(\n      'mouse_out',\n      XRAnalytics.UserInteractionTypes.MouseOut,\n      {\n        state: XRAnalytics.PointStates.Stationary,\n        timestamp: Date.now(),\n        position: { x, y },\n      },\n      undefined,\n      params,\n    );\n  };\n\n  public logMouseDownEvent = (x: number, y: number, params?: object) => {\n    this.sendUserEvent(\n      'mouse_down',\n      XRAnalytics.UserInteractionTypes.MouseDown,\n      {\n        state: XRAnalytics.PointStates.Pressed,\n        timestamp: Date.now(),\n        position: { x, y },\n      },\n      undefined,\n      params,\n    );\n  };\n\n  public logMouseUpEvent = (x: number, y: number, params?: object) => {\n    this.sendUserEvent(\n      'mouse_up',\n      XRAnalytics.UserInteractionTypes.MouseUp,\n      {\n        state: XRAnalytics.PointStates.Released,\n        timestamp: Date.now(),\n        position: { x, y },\n      },\n      undefined,\n      params,\n    );\n  };\n\n  public logMouseMoveEvent = (x: number, y: number, params?: object) => {\n    this.sendUserEvent(\n      'mouse_move',\n      XRAnalytics.UserInteractionTypes.MouseMove,\n      {\n        state: XRAnalytics.PointStates.Updated,\n        timestamp: Date.now(),\n        position: { x, y },\n      },\n      undefined,\n      params,\n    );\n  };\n\n  public logMousePressEvent = (x: number, y: number, params?: object) => {\n    this.sendUserEvent(\n      'mouse_press',\n      XRAnalytics.UserInteractionTypes.MousePress,\n      {\n        state: XRAnalytics.PointStates.Stationary,\n        timestamp: Date.now(),\n        position: { x, y },\n      },\n      undefined,\n      params,\n    );\n  };\n\n  public logTouchTapEvent = (x: number, y: number, params?: object) => {\n    this.sendUserEvent(\n      'touch_tap',\n      XRAnalytics.UserInteractionTypes.TouchTap,\n      {\n        state: XRAnalytics.PointStates.Stationary,\n        timestamp: Date.now(),\n        position: { x, y },\n      },\n      undefined,\n      params,\n    );\n  };\n\n  public logTouchStartEvent = (x: number, y: number, params?: object) => {\n    this.sendUserEvent(\n      'touch_start',\n      XRAnalytics.UserInteractionTypes.TouchStart,\n      {\n        state: XRAnalytics.PointStates.Pressed,\n        timestamp: Date.now(),\n        position: { x, y },\n      },\n      undefined,\n      params,\n    );\n  };\n\n  public logTouchMoveEvent = (x: number, y: number, params?: object) => {\n    this.sendUserEvent(\n      'touch_move',\n      XRAnalytics.UserInteractionTypes.TouchMove,\n      {\n        state: XRAnalytics.PointStates.Updated,\n        timestamp: Date.now(),\n        position: { x, y },\n      },\n      undefined,\n      params,\n    );\n  };\n\n  public logTouchEndEvent = (x: number, y: number, params?: object) => {\n    this.sendUserEvent(\n      'touch_end',\n      XRAnalytics.UserInteractionTypes.TouchEnd,\n      {\n        state: XRAnalytics.PointStates.Released,\n        timestamp: Date.now(),\n        position: { x, y },\n      },\n      undefined,\n      params,\n    );\n  };\n\n  public logZoomStartEvent = (x: number, y: number, params?: object) => {\n    this.sendUserEvent(\n      'zoom_start',\n      XRAnalytics.UserInteractionTypes.ZoomStart,\n      {\n        state: XRAnalytics.PointStates.Pressed,\n        timestamp: Date.now(),\n        position: { x, y },\n      },\n      undefined,\n      params,\n    );\n  };\n\n  public logZoomUpdateEvent = (x: number, y: number, params?: object) => {\n    this.sendUserEvent(\n      'zoom_update',\n      XRAnalytics.UserInteractionTypes.ZoomUpdate,\n      {\n        state: XRAnalytics.PointStates.Updated,\n        timestamp: Date.now(),\n        position: { x, y },\n      },\n      undefined,\n      params,\n    );\n  };\n\n  public logZoomEndEvent = (x: number, y: number, params?: object) => {\n    this.sendUserEvent(\n      'zoom_end',\n      XRAnalytics.UserInteractionTypes.ZoomEnd,\n      {\n        state: XRAnalytics.PointStates.Released,\n        timestamp: Date.now(),\n        position: { x, y },\n      },\n      undefined,\n      params,\n    );\n  };\n}\n","import { API_URL } from '../constants';\nimport { XRAnalytics } from '../types';\n\nexport async function sendXRAnalyticsData(data: XRAnalytics.Record | XRAnalytics.BatchRecord) {\n  console.log('poll', data);\n\n  return fetch(`${API_URL}/xr-analytics`, {\n    method: 'POST',\n    keepalive: true,\n    headers: { 'Content-Type': 'application/json' },\n    body: JSON.stringify(data),\n  });\n}\n","import { Scene } from 'babylonjs';\nimport { MetalitixLoggerOptions } from '../types';\nimport MetalitixLoggerBase from './mtx-poll-base';\n\nexport default class MetalitixLogger extends MetalitixLoggerBase<Scene> {\n  constructor(appKey: string, options: MetalitixLoggerOptions = {}) {\n    super(appKey, options);\n  }\n\n  protected getPositionData = (scene: Scene | null) => {\n    const camera = scene?.activeCamera ?? null;\n    if (camera === null) {\n      return undefined;\n    }\n\n    return {\n      position: { x: camera.position.x, y: camera.position.y, z: camera.position.z },\n      direction: { x: camera.absoluteRotation.x, y: camera.absoluteRotation.y, z: camera.absoluteRotation.z },\n    };\n  };\n\n  protected getCameraData = (scene: Scene | null) => {\n    const camera = scene?.activeCamera ?? null;\n    if (camera === null) {\n      return undefined;\n    }\n\n    return {\n      fieldOfView: camera.fov,\n      aspectRatio: camera.viewport.width / camera.viewport.height,\n      zNearPlane: camera.minZ,\n      zFarPlane: camera.maxZ,\n    };\n  };\n}\n"],"names":["root","factory","exports","module","define","amd","self","__webpack_require__","definition","key","o","Object","defineProperty","enumerable","get","obj","prop","prototype","hasOwnProperty","call","_lut","i","toString","Math","PI","DEFAULT_INTERVAL_VALUE","XRAnalytics","deepEqual","x","y","ok","keys","tx","length","every","PointStates","UserInteractionTypes","EventTypes","KnownPointStates","values","KnownUserInteractionTypes","KnownEventTypes","MetalitixLoggerBase","constructor","appKey","options","interval","customData","object3D","setPollInterval","pollInterval","this","min","max","setCustomField","value","removeCustomField","getRecord","eventType","sessionId","userEvent","userMeta","camera","data","resultData","assign","base","object","appkey","apiver","apiVersion","timestamp","Date","now","SessionStart","console","assert","undefined","SessionUpdate","SessionEnd","UserPosition","UserInteraction","Error","addRecord","record","pollRecords","push","sendPosition","sendAll","items","slice","batchRecordsData","log","fetch","method","keepalive","headers","body","JSON","stringify","sendXRAnalyticsData","lastPollTimestamp","error","forceStopLoop","getUserMeta","userAgent","window","navigator","pagePath","location","pathname","pageQuery","search","addSessionStart","getPositionData","getCameraData","previousCameraData","addSessionEnd","addUserPosition","addSessionUpdate","sddNextUserPositionAndUpdateCameraIfNeeded","sendPositionLoop","start","nextPoll","setTimeout","clearTimeout","clearSessionPollRecords","handleVisibilityChange","document","visibilityState","pauseSession","resumeSession","startSession","d0","random","d1","d2","d3","toUpperCase","generateUUID","addEventListener","endSession","removeEventListener","updateUserMeta","sendUserEvent","eventName","target","points","params","logCustomEvent","logKeyDownEvent","KeyDown","state","Pressed","position","logKeyPressEvent","KeyPress","Stationary","logKeyUpEvent","KeyUp","Released","logMouseEnterEvent","MouseEnter","logMouseLeaveEvent","MouseLeave","logMouseOverEvent","MouseOver","logMouseOutEvent","MouseOut","logMouseDownEvent","MouseDown","logMouseUpEvent","MouseUp","logMouseMoveEvent","MouseMove","Updated","logMousePressEvent","MousePress","logTouchTapEvent","TouchTap","logTouchStartEvent","TouchStart","logTouchMoveEvent","TouchMove","logTouchEndEvent","TouchEnd","logZoomStartEvent","ZoomStart","logZoomUpdateEvent","ZoomUpdate","logZoomEndEvent","ZoomEnd","MetalitixLogger","super","scene","activeCamera","z","direction","absoluteRotation","fieldOfView","fov","aspectRatio","viewport","width","height","zNearPlane","minZ","zFarPlane","maxZ"],"sourceRoot":""}